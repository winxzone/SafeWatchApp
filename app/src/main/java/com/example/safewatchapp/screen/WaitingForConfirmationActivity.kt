package com.example.safewatchapp.screen

import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.example.safewatchapp.databinding.ActivityWaitingConfirmationBinding
import com.example.safewatchapp.manager.DeviceManager
import com.example.safewatchapp.models.ChildDevice
import com.example.safewatchapp.retrofit.ApiClient
import com.example.safewatchapp.utils.DeviceIdUtils.getDeviceUniqueId
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

class WaitingForConfirmationActivity : AppCompatActivity() {
    private lateinit var binding: ActivityWaitingConfirmationBinding
    private var pollingJobActive = true

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityWaitingConfirmationBinding.inflate(layoutInflater)
        setContentView(binding.root)
        startPollingDeviceStatus()

        binding.btnRetryRequest.setOnClickListener {
            Log.d("WaitingActivity", "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            registerDeviceAgain()
        }
    }
    
    private fun startPollingDeviceStatus() {
        lifecycleScope.launch {
            while (pollingJobActive) {
                Log.d("WaitingActivity", "Polling –∑–∞–ø—É—â–µ–Ω")
                delay(5000)

                val childDeviceId = DeviceManager.getChildDeviceId(this@WaitingForConfirmationActivity)

                if (childDeviceId == null) {
                    Log.e("WaitingActivity", "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ childDeviceId –≤ SharedPreferences")
                    break
                }

                Log.d("WaitingActivity", "üëâ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π childDeviceId: $childDeviceId")

                try {
                    val devices = ApiClient.childDeviceApiService.listChildDevice()
                    Log.d("WaitingActivity", "üì• –ü–æ–ª—É—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.size}")
                    devices.forEachIndexed { index, device ->
                        Log.d("WaitingActivity", "üìÑ[$index] device.id=${device.id}, status=${device.status}, deviceId=${device.deviceId}, childId=${device.childId}")
                    }

                    val currentDevice = devices.find { it.id == childDeviceId }

                    if (currentDevice == null) {
                        Log.w("WaitingActivity", "‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID $childDeviceId –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                    } else {
                        Log.d("WaitingActivity", "‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: id=${currentDevice.id}, status=${currentDevice.status}, childId=${currentDevice.childId}")

                        if (currentDevice.status == "confirmed" && currentDevice.childId != null) {
                            Log.d("WaitingActivity", "üéâ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º")
                            DeviceManager.saveChildProfileId(this@WaitingForConfirmationActivity, currentDevice.childId)
                            pollingJobActive = false
                            goToPermissionsScreen()
                            break
                        }
                    }

                } catch (e: Exception) {
                    Log.e("WaitingActivity", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${e.message}")
                }
            }
        }
    }



    private fun goToPermissionsScreen() {
        startActivity(Intent(this, PermissionsActivity::class.java))
        finish()
    }

    private fun registerDeviceAgain() {
        val deviceName = "${Build.MANUFACTURER} ${Build.MODEL}"
        val deviceId = getDeviceUniqueId(this)

        val newDevice = ChildDevice(
            name = deviceName,
            deviceId = deviceId,
            id = null,
            userId = null,
            childId = null,
            status = "unconfirmed",
            createdAt = System.currentTimeMillis(),
            confirmedAt = null
        )

        lifecycleScope.launch {
            try {
                val response = ApiClient.childDeviceApiService.registerChildDevice(newDevice)
                if (response.isSuccessful) {
                    val newId = response.body()?.id
                    if (newId != null) {
                        Log.d("WaitingActivity", "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: $newId")
                        DeviceManager.saveChildDeviceId(this@WaitingForConfirmationActivity, newId)
                    } else {
                        Log.e("WaitingActivity", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
                    }
                } else {
                    Log.e("WaitingActivity", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("WaitingActivity", "–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${e.message}")
            }
        }
    }
}
