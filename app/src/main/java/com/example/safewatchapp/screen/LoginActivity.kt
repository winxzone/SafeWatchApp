package com.example.safewatchapp.screen

import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.widget.CheckBox
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.example.safewatchapp.R
import com.example.safewatchapp.databinding.LoginBinding
import com.example.safewatchapp.models.ChildDevice
import com.example.safewatchapp.models.UserLogin
import com.example.safewatchapp.retrofit.ApiClient
import com.example.safewatchapp.utils.RoleManager
import com.example.safewatchapp.utils.TokenManager
import kotlinx.coroutines.launch
import com.example.safewatchapp.manager.DeviceManager
import com.example.safewatchapp.utils.DeviceIdUtils.getDeviceUniqueId


class LoginActivity : AppCompatActivity() {
    private lateinit var binding: LoginBinding
    private lateinit var checkBoxRemindMe: CheckBox

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("LoginActivity", "onCreate() called")
        setupUI()
        setupListeners()
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    private fun setupUI() {
        binding = LoginBinding.inflate(layoutInflater)
        setContentView(binding.root)

        checkBoxRemindMe = binding.checkboxRemindMe
        checkBoxRemindMe.isChecked = TokenManager.isRemindMeEnabled(this)
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∫–Ω–æ–ø–æ–∫
    private fun setupListeners() {
        binding.buttonRegistation.setOnClickListener {
            navigateToRegistration()
        }

        binding.buttonForgotPassword.setOnClickListener {
            navigateToForgotPassword()
        }

        binding.buttonNext.setOnClickListener {
            if(validateLogin()){
                loginUser()
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    private fun navigateToRegistration() {
        val intent = Intent(this, RegistationActivity::class.java)
        startActivity(intent)
        finish()
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    private fun navigateToForgotPassword() {
        val intent = Intent(this, ForgetPasswordActivity::class.java)
        startActivity(intent)
        finish()
    }

    private fun navigateToMainActivity(){
        val intent = Intent(this, MainActivity::class.java)
        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        startActivity(intent)
        finish()
    }

    private fun navigateToWaitingForConfirmationActivity(deviceId: String?){
        val intent = Intent(this@LoginActivity, WaitingForConfirmationActivity::class.java)
        intent.putExtra("deviceId", deviceId)
        startActivity(intent)
        finish()
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
    private fun navigateByRole(isChild: Boolean, deviceId: String? = null, childProfileId: String? = null) {
        if (!isChild) {
            Log.d("Navigation", "üë§ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è")
            navigateToMainActivity()
            return
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (!childProfileId.isNullOrEmpty()) {
            Log.d("Navigation", "‚úÖ –î–µ—Ç—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")
             navigateToMainActivity() // –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ê–ö–¢–ò–í–ò–¢–ò –î–õ–Ø –†–ï–ë–ï–ù–ö–ê
            return
        }

        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (!deviceId.isNullOrEmpty()) {
            lifecycleScope.launch {
                try {
                    val devices = ApiClient.childDeviceApiService.listChildDevice()
                    val device = devices.find { it.id == deviceId }

                    if (device?.status == "confirmed" && device.childId != null) {
                        Log.d("Navigation", "‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")
                        DeviceManager.saveChildProfileId(this@LoginActivity, device.childId)
                        navigateToMainActivity()
                    } else {
                        Log.d("Navigation", "‚åõ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è")
                        navigateToWaitingForConfirmationActivity(deviceId)
                    }
                } catch (e: Exception) {
                    Log.e("Navigation", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${e.message}")
                    navigateToWaitingForConfirmationActivity(deviceId)
                }
            }
        } else {
            Log.e("Navigation", "‚ùå –ù–µ—Ç deviceId –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            runOnUiThread {
                Toast.makeText(this@LoginActivity, "–û—à–∏–±–∫–∞: ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun checkDeviceBinding() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" –∏ —Ç–æ–∫–µ–Ω–∞
        if (TokenManager.isRemindMeEnabled(this) && TokenManager.getToken(this) != null) {
            Log.d("DeviceCheck", "‚úÖ RemindMe –≤–∫–ª—é—á—ë–Ω –∏ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            val isChild = RoleManager.isChild(this)
            if (!isChild) {
                // –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                navigateByRole(isChild = false)
                return
            }
            // –î–ª—è —Ä–µ–±—ë–Ω–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º childProfileId
            val savedChildProfileId = DeviceManager.getChildProfileId(this)
            if (!savedChildProfileId.isNullOrEmpty()) {
                // –ï—Å–ª–∏ childProfileId –µ—Å—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                navigateByRole(isChild = true, childProfileId = savedChildProfileId)
                return
            }
            // –ï—Å–ª–∏ childProfileId –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            Log.d("DeviceCheck", "‚ö†Ô∏è RemindMe –≤–∫–ª—é—á—ë–Ω, –Ω–æ childProfileId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
        }

        val token = TokenManager.getToken(this)
        if (token == null) {
            Log.d("DeviceCheck", "‚ùå Token is null")
            return
        }

        val savedChildProfileId = DeviceManager.getChildProfileId(this)
        Log.d("DeviceCheck", "üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π childProfileId –∏–∑ SharedPrefs: $savedChildProfileId")
        if (!savedChildProfileId.isNullOrEmpty()) {
            Log.d("DeviceCheck", "‚úÖ Child profile —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É")
            navigateByRole(isChild = true, childProfileId = savedChildProfileId)
            return
        }

        val deviceName = "${Build.MANUFACTURER} ${Build.MODEL}"
        val deviceId = getDeviceUniqueId(this)
        Log.d("DeviceCheck", "üì± Device Info ‚Äî Name: $deviceName, ID: $deviceId")

        val isChild = RoleManager.isChild(this)
        Log.d("DeviceCheck", "üßí Is child device: $isChild")

        if (!isChild) {
            Log.d("DeviceCheck", "üë§ –ù–µ –¥–µ—Ç—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω.")
            navigateByRole(isChild = false)
            return
        }

        lifecycleScope.launch {
            try {
                val devices = ApiClient.childDeviceApiService.listChildDevice()
                Log.d("DeviceCheck", "üì• –ü–æ–ª—É—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.size}")

                val currentDevice = devices.find { it.deviceId == deviceId }

                if (currentDevice == null) {
                    Log.w("DeviceCheck", "üì≠ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
                    registerDevice(deviceName, deviceId)
                    return@launch
                }

                Log.d("DeviceCheck", "üîç –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: id=${currentDevice.id}, status=${currentDevice.status}, childId=${currentDevice.childId}")

                when (currentDevice.status) {
                    "unconfirmed" -> {
                        DeviceManager.saveChildDeviceId(this@LoginActivity, currentDevice.id)
                        Log.d("DeviceCheck", "üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω childDeviceId: ${currentDevice.id}")
                        navigateByRole(isChild = true, deviceId = currentDevice.id)
                    }

                    "confirmed" -> {
                        val childDeviceId = currentDevice.id
                        val childProfileId = currentDevice.childId

                        if (!childDeviceId.isNullOrEmpty()) {
                            DeviceManager.saveChildDeviceId(this@LoginActivity, childDeviceId)
                            Log.d("DeviceCheck", "üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω childDeviceId: $childDeviceId")
                        }

                        if (!childProfileId.isNullOrEmpty()) {
                            DeviceManager.saveChildProfileId(this@LoginActivity, childProfileId)
                            Log.d("DeviceCheck", "üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω childProfileId: $childProfileId")
                            navigateByRole(isChild = true, childProfileId = childProfileId)
                        } else {
                            Log.d("DeviceCheck", "‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –Ω–æ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                            navigateByRole(isChild = true, deviceId = childDeviceId ?: "")
                        }
                    }

                    else -> {
                        Log.w("DeviceCheck", "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${currentDevice.status}")
                    }
                }

            } catch (e: Exception) {
                Log.e("DeviceCheck", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${e.message}")
                registerDevice(deviceName, deviceId)
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    private fun registerDevice(deviceName: String, deviceId: String) {
        val newDevice = ChildDevice(
            name = deviceName,
            deviceId = deviceId,
            id = null,
            userId = null,
            childId = null,
            status = "unconfirmed",
            createdAt = System.currentTimeMillis(),
            confirmedAt = null
        )

        lifecycleScope.launch {
            try {
                val response = ApiClient.childDeviceApiService.registerChildDevice(newDevice)
                if (response.isSuccessful) {
                    val savedDevice = response.body()
                    savedDevice?.id?.let { id ->
                        DeviceManager.saveChildDeviceId(this@LoginActivity, id)
                        Log.d("DeviceRegister", "‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: $id")
                        navigateByRole(isChild = true, deviceId = id)
                    } ?: run {
                        Log.e("DeviceRegister", "‚ùå ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                        runOnUiThread {
                            Toast.makeText(this@LoginActivity, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", Toast.LENGTH_SHORT).show()
                        }
                    }
                } else {
                    Log.e("DeviceRegister", "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${response.code()}")
                    runOnUiThread {
                        Toast.makeText(this@LoginActivity, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", Toast.LENGTH_SHORT).show()
                    }
                }
            } catch (e: Exception) {
                Log.e("DeviceRegister", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${e.message}")
                runOnUiThread {
                    Toast.makeText(this@LoginActivity, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –ª–æ–≥–∏–Ω–∞
    private fun validateLogin(): Boolean{
        var isValid = true

        binding.apply{

            edEmail.error = null
            edPassword.error = null

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
            val email = edEmail.text.toString().trim()
            if (email.isEmpty()) {
                edEmail.error = getString(R.string.error_empty)
                isValid = false
            } else if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
                edEmail.error = getString(R.string.error_invalid_email)
                isValid = false
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
            val password = edPassword.text.toString().trim()
            if (password.isEmpty()) {
                edPassword.error = getString(R.string.error_empty)
                isValid = false
            }
        }

        return isValid
    }

    private fun loginUser() {
        val email = binding.edEmail.text.toString()
        val password = binding.edPassword.text.toString()
        val userLogin = UserLogin(email, password)

        lifecycleScope.launch {
            try {
                val response = ApiClient.authApiService.loginUser(userLogin)
                if (response.isSuccessful) {
                    val token = response.body()?.token
                    Log.d("Login", "Login successful: Token: $token")

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é TokenManager
                    token?.let {
                        TokenManager.saveToken(applicationContext, it)
                        TokenManager.saveRemindMe(applicationContext, binding.checkboxRemindMe.isChecked)

                        if (TokenManager.getToken(applicationContext) != null) {
                            checkDeviceBinding()
                        } else {
                            Log.e("Login", "Token was not properly saved")
                            Toast.makeText(this@LoginActivity, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏", Toast.LENGTH_SHORT).show()
                        }
                    } ?: run {
                        Log.e("Login", "Token is null in response")
                        Toast.makeText(this@LoginActivity, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    when (response.code()) {
                        404 -> binding.edEmail.error = getString(R.string.error_user_not_found)
                        401 -> binding.edPassword.error = getString(R.string.error_invalid_password)
                        else -> {
                            Log.e("Login", "Login failed: ${response.code()} - ${response.message()}")
                            Toast.makeText(this@LoginActivity, "Login failed: ${response.message()}", Toast.LENGTH_SHORT).show()
                        }
                    }
                }
            } catch (e: Exception) {
                Log.e("Login", "Network error: ${e.message}")
                Toast.makeText(this@LoginActivity, "Network error: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }
}
